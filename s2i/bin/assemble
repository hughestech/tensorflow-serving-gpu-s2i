#!/bin/bash -e
#
# S2I assemble script for the 'radanalyticsio/tensorflow-serving-s2i' image.
# The 'assemble' script builds your application source so that it is ready to run.
#
# For more information refer to the documentation:
#	https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
#

# If the 'radanalyticsio/tensorflow-serving-s2i' assemble script is executed with the '-h' flag, print the usage.
set -ex

if [[ "$1" == "-h" ]]; then
	exec /usr/libexec/s2i/usage
fi

# echo " -----> Move models files into place."
# mkdir -p /opt/app-root/src/
# mv /tmp/src/* /opt/app-root/src/

#!/bin/bash

function is_django_installed() {
  python -c "import django" &>/dev/null
}

function should_collectstatic() {
  is_django_installed && [[ -z "$DISABLE_COLLECTSTATIC" ]]
}

# Install pipenv to the separate virtualenv to isolate it
# from system Python packages and packages in the main
# virtualenv. Executable is simlinked into ~/.local/bin
# to be accessible. This approach is inspired by pipsi
# (pip script installer).
function install_pipenv() {
  echo "---> Installing pipenv packaging tool ..."
  VENV_DIR=$HOME/.local/venvs/pipenv
  virtualenv $VENV_DIR
  $VENV_DIR/bin/pip --isolated install -U pipenv
  mkdir -p $HOME/.local/bin
  ln -s $VENV_DIR/bin/pipenv $HOME/.local/bin/pipenv
}

set -e

shopt -s dotglob

echo "---> List permissions"
ls -ld

echo "---> Installing application source ..."
mv /tmp/src/* ./

if [[ ! -z "$UPGRADE_PIP_TO_LATEST" ]]; then
  echo "---> Upgrading pip to latest version ..."
  pip install -U pip setuptools wheel
fi

if [[ ! -z "$ENABLE_PIPENV" ]]; then
  install_pipenv
  echo "---> Installing dependencies via pipenv ..."
  if [[ -f Pipfile ]]; then
    pipenv install --deploy
  elif [[ -f requirements.txt ]]; then
    pipenv install -r requirements.txt
  fi
  pipenv check
elif [[ -f requirements.txt ]]; then
  echo "---> Installing dependencies ..."
  pip install -r requirements.txt
elif [[ -f setup.py ]]; then
  echo "---> Installing application ..."
  python setup.py develop
fi

count=`ls -1 *.sh 2>/dev/null | wc -l`
if [ $count != 0 ];
 then
  echo "### Giving exec permissions"
  ls
  chmod +x *.sh
 else
  echo "### Could not find any .sh files"
fi

if should_collectstatic; then
  (
    echo "---> Collecting Django static files ..."


    APP_HOME=${APP_HOME:-.}
    # Look for 'manage.py' in the directory specified by APP_HOME, or the current directory
    manage_file=$APP_HOME/manage.py

    if [[ ! -f "$manage_file" ]]; then
      echo "WARNING: seems that you're using Django, but we could not find a 'manage.py' file."
      echo "'manage.py collectstatic' ignored."
      exit
    fi

    if ! python $manage_file collectstatic --dry-run --noinput &> /dev/null; then
      echo "WARNING: could not run 'manage.py collectstatic'. To debug, run:"
      echo "    $ python $manage_file collectstatic --noinput"
      echo "Ignore this warning if you're not serving static files with Django."
      exit
    fi

    python $manage_file collectstatic --noinput
  )
fi


# set permissions for any installed artifacts
# fix-permissions /opt/app-root
